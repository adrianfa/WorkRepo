package com.easypark;

import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;

import javax.servlet.http.*;

import com.google.gson.Gson;
import com.googlecode.objectify.Ref;

@SuppressWarnings("serial")
public class ParkingSessionServletAPI extends HttpServlet {
	
	private static final Logger log = Logger.getLogger(ParkingSessionServletAPI.class.getName());
	
	public void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws IOException {
		
		log.warning("Entering ParkingSessionServletAPI");

		String licensePlate = req.getParameter("licensePlate"); 
		String parkingLot = req.getParameter("parkingLot"); 
		String duration = req.getParameter("duration"); 
		String paymentMethod = req.getParameter("paymentMethod"); 
		Long userId = 0L;
		Long sessionId = 0L;
		Long lotId = 0L;
		int availableSpots = 0;
		long cost = 0;
		long price = 0;

		List<ParkingLot> lots = OfyService.ofy().load().type(ParkingLot.class).list();
       
		for (ParkingLot lot : lots) {
			if(lot.location.compareToIgnoreCase(parkingLot) == 0) {
				availableSpots = lot.freeSpots;
				lotId = lot.lotId;
				price = Long.valueOf(lot.price);
				break;
			}
		}
		if(availableSpots == 0) {
			
		} else if(licensePlate != null) {
			UserAccount ua = new UserAccount(licensePlate, null, null, 100*25L);
			if(!ua.isAlreadyInList(ua)) 
				OfyService.ofy().save().entity(ua);
			
			Ref<UserAccount> ua1 = OfyService.ofy().load().type(UserAccount.class).filter("licensePlate", licensePlate).first();
			ua = ua1.get();
			assert ua.userId != null;    // id was autogenerated
			userId = ua.userId; 
			
			ParkingSession ps = new ParkingSession(parkingLot, Long.valueOf(duration), paymentMethod, userId);
			OfyService.ofy().save().entity(ps);
			List<ParkingSession> sessions = OfyService.ofy().load().type(ParkingSession.class).list();
			for(ParkingSession s : sessions)
				if(s.lotAddress.compareTo(parkingLot) == 0) {
					sessionId = s.sessionId; 
					break;
				}
			cost = (Long.valueOf(duration) - ps.startTime.getTime())/(1000*60*60)*price;
		}
		
		
		ParkingSession session = new ParkingSession(sessionId, userId, lotId, availableSpots, parkingLot, Long.valueOf(duration), paymentMethod, cost);
		Gson gson = new Gson();
		String json = gson.toJson(session);
		resp.setContentType("application/json");
		resp.getWriter().print(json);
		
	}
}